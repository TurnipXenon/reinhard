{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reinhard Reinhard is the infrastructure configuration for our edge service. It may also be home to the services that should be centralized. Important links Documentation page [ ] Project page [ ] Technical specification doc Specific sections inside the documentation page: [ ] Setup? [ ] Quickstart [ ] Onboarding guide [ ] Testing locally [ ] Testing via dev stack [ ] Deploying to production [ ] Runbook [ ] API [ ] Technical specification (generated) Private workflow: https://turnipxenon.github.io/cornmaze/private_workflow/ Code standards: https://turnipxenon.github.io/cornmaze/code_standards/ Contributing to README.md Do not edit ./README.md ! Instead, edit ./docs/docs/index.md . Requirements: You need Go >=1.17 installed. Run go install github.com/TurnipXenon/cornmaze/dev/sync_readme@latest Command: After editing that file, run go run github.com/TurnipXenon/cornmaze/dev/sync_readme from the root folder / . That should automatically transform all the relative references.","title":"Home"},{"location":"#reinhard","text":"Reinhard is the infrastructure configuration for our edge service. It may also be home to the services that should be centralized.","title":"Reinhard"},{"location":"#important-links","text":"Documentation page [ ] Project page [ ] Technical specification doc Specific sections inside the documentation page: [ ] Setup? [ ] Quickstart [ ] Onboarding guide [ ] Testing locally [ ] Testing via dev stack [ ] Deploying to production [ ] Runbook [ ] API [ ] Technical specification (generated) Private workflow: https://turnipxenon.github.io/cornmaze/private_workflow/ Code standards: https://turnipxenon.github.io/cornmaze/code_standards/","title":"Important links"},{"location":"#contributing-to-readmemd","text":"Do not edit ./README.md ! Instead, edit ./docs/docs/index.md . Requirements: You need Go >=1.17 installed. Run go install github.com/TurnipXenon/cornmaze/dev/sync_readme@latest Command: After editing that file, run go run github.com/TurnipXenon/cornmaze/dev/sync_readme from the root folder / . That should automatically transform all the relative references.","title":"Contributing to README.md"},{"location":"onboarding/","text":"Onboarding Setup TODO PLACEHOLDER Requirements: This is a CDK project so you need the prerequisites for CDK. Look at Prerequisite for the CDK Workshop . You need the following: AWS CLI AWS Account and User Node.js AWS CDK Toolkit Note that you might need admin privileges for some of the commands! The cdk.json file tells the CDK Toolkit how to execute your app. Startup commands: 1. cdk synth 2. cdk bootstrap Useful commands npm run build compile typescript to js npm run watch watch for changes and compile npm run test perform the jest unit tests cdk deploy deploy this stack to your default AWS account/region cdk diff compare deployed stack with current state cdk synth emits the synthesized CloudFormation template MKDocs You don't really need to run through this to make edits to MKDocs, but if you want to see the layout and what it looks like served, check this guide. This assumes that you have Python installed locally. MKDocs: Setup pip install mkdocs MKDocs: Commands When entering these commands, go to /docs instead of being in the project's root folder / . mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. MKDocs: Ideal workflow Make changes See changes made using mkdocs serve If you edited index.md, run go run dev/sync_mkdocs_readme.go from the root folder / .","title":"Onboarding"},{"location":"onboarding/#onboarding","text":"","title":"Onboarding"},{"location":"onboarding/#setup","text":"TODO PLACEHOLDER Requirements: This is a CDK project so you need the prerequisites for CDK. Look at Prerequisite for the CDK Workshop . You need the following: AWS CLI AWS Account and User Node.js AWS CDK Toolkit Note that you might need admin privileges for some of the commands! The cdk.json file tells the CDK Toolkit how to execute your app. Startup commands: 1. cdk synth 2. cdk bootstrap","title":"Setup"},{"location":"onboarding/#useful-commands","text":"npm run build compile typescript to js npm run watch watch for changes and compile npm run test perform the jest unit tests cdk deploy deploy this stack to your default AWS account/region cdk diff compare deployed stack with current state cdk synth emits the synthesized CloudFormation template","title":"Useful commands"},{"location":"onboarding/#mkdocs","text":"You don't really need to run through this to make edits to MKDocs, but if you want to see the layout and what it looks like served, check this guide. This assumes that you have Python installed locally.","title":"MKDocs"},{"location":"onboarding/#mkdocs-setup","text":"pip install mkdocs","title":"MKDocs: Setup"},{"location":"onboarding/#mkdocs-commands","text":"When entering these commands, go to /docs instead of being in the project's root folder / . mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"MKDocs: Commands"},{"location":"onboarding/#mkdocs-ideal-workflow","text":"Make changes See changes made using mkdocs serve If you edited index.md, run go run dev/sync_mkdocs_readme.go from the root folder / .","title":"MKDocs: Ideal workflow"}]}